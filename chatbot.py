from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import os
from dotenv import load_dotenv
import google.generativeai as genai
from fastapi.middleware.cors import CORSMiddleware

# Cr√©ation de l'application FastAPI
app = FastAPI()

# Autoriser les appels provenant du frontend React
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Charger la cl√© API depuis les variables d'environnement
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

# Structure pour la question re√ßue
class Question(BaseModel):
    question: str

# Fonction pour construire le prompt avec le corpus
def construire_prompt(question_utilisateur, chemin_corpus="corpus_beaute.txt"):
    try:
        with open(chemin_corpus, "r", encoding="utf-8") as f:
            corpus = f.read()
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Corpus file not found")
    
    prompt = f"""
Tu es ponyo, un expert en beaut√©, soins de la peau, skincare, maquillage et parfumerie.
Tu dois **uniquement** r√©pondre aux questions li√©es √† ces sujets. 
Si une question ne concerne pas la beaut√©, les soins de peau, la skincare, le maquillage ou les parfums, r√©ponds simplement :

"Sweetie, je suis uniquement sp√©cialis√©e en beaut√©, maquillage et parfumerie. Pose-moi une question sur ces sujets üíÑ‚ú®" ou des phrases du genres,
Si  l'utilisateur te demande comment tu t'appelles, r√©ponds simplement : "Je suis ponyo, ton expert beaut√© üíñ".


Tu as acc√®s √† une base d‚Äôinformations fiables sur ces sujets. Utilise ces connaissances pour r√©pondre de fa√ßon claire, pr√©cise, naturelle et bien structur√©e √† la question suivante. Ne dis jamais que tu te bases sur un corpus ou sur tes connaissances personnelles.
Si la question pos√©e est en rapport avec la beaut√©, les soins de peau, la skincare, le maquillage ou les parfums, r√©ponds-y avec tes propres connaissances mais sans dire que √ßa vient de toi.

Ne commence jamais tes r√©ponses par "le corpus dit", "je pense", "je crois" ou toute autre expression du genre. Donne ta r√©ponse comme si elle venait d‚Äôun expert s√ªr de lui. Termine toujours par une phrase de motivation li√©e √† la question.

Voici tes connaissances :
\"\"\"{corpus}\"\"\"

Question : {question_utilisateur}

R√©ponse :
"""
    return prompt

# Endpoint pour recevoir la question et renvoyer la r√©ponse
@app.post("/chat")
async def chat_beaute(data: Question):
    try:
        prompt = construire_prompt(data.question)
        response = genai.GenerativeModel("gemini-2.0-flash").generate_content(prompt)
        return {"reponse": response.text.strip()}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de l'appel √† l'API Gemini : {str(e)}")
