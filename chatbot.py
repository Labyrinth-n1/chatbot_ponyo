from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import os
from dotenv import load_dotenv
import google.generativeai as genai
from fastapi.middleware.cors import CORSMiddleware

# Cr√©ation de l'application FastAPI
app = FastAPI()

# Autoriser les appels provenant du frontend React
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Charger la cl√© API depuis les variables d'environnement
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

# Structure pour la question re√ßue
class Question(BaseModel):
    question: str

# Fonction pour construire le prompt avec le corpus
def construire_prompt(question_utilisateur, chemin_corpus="corpus_beaute.txt"):
    try:
        with open(chemin_corpus, "r", encoding="utf-8") as f:
            corpus = f.read()
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Corpus file not found")
    
    prompt = f"""
    Tu es un expert en beaut√© et en parfumerie. Voici un corpus contenant des informations sp√©cifiques sur les soins de la peau, le maquillage, les parfums, et les routines beaut√©.
    Utilise ce corpus pour r√©pondre de mani√®re d√©taill√©e et pr√©cise aux questions sur ces sujets. Si aucune r√©ponse claire n'y figure, r√©ponds quand m√™me de mani√®re pertinente, sans dire que cela vient de toi. Termine toujours par une phrase de motivation en rapport avec la question.
    Si la question n'est pas li√©e √† la beaut√©, au maquillage ou √† la parfumerie, indique clairement que tu es uniquement con√ßu pour ces sujets.

    üìö Corpus beaut√© :
    \"\"\"{corpus}\"\"\"

    ‚ùì Question :
    {question_utilisateur}

    üìù R√©ponse :
    """
    return prompt

# Endpoint pour recevoir la question et renvoyer la r√©ponse
@app.post("/chat")
async def chat_beaute(data: Question):
    try:
        prompt = construire_prompt(data.question)
        response = genai.GenerativeModel("gemini-2.0-flash").generate_content(prompt)
        return {"reponse": response.text.strip()}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de l'appel √† l'API Gemini : {str(e)}")
