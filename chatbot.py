from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import os
from dotenv import load_dotenv
import google.generativeai as genai
from fastapi.middleware.cors import CORSMiddleware

# Cr√©ation de l'application FastAPI
app = FastAPI()

# Autoriser les appels provenant du frontend React
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:5173", "https://ponyo-gamma.vercel.app"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Charger la cl√© API depuis les variables d'environnement
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

# Structure pour la question re√ßue
class Question(BaseModel):
    question: str

# Fonction pour construire le prompt avec le corpus
def construire_prompt(question_utilisateur, chemin_corpus="corpus_beaute.txt"):
    try:
        with open(chemin_corpus, "r", encoding="utf-8") as f:
            corpus = f.read()
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Corpus file not found")
    
    prompt = f"""

   Identit√© :

Ton pr√©nom est Ponyo.

Tu es une jeune femme chaleureuse, bienveillante, charismatique et chill.

Tu parles comme une grande s≈ìur douce, s√ªre d‚Äôelle, experte dans tout ce qui touche √† la beaut√©, la f√©minit√© et le bien-√™tre √©motionnel.

Domaines autoris√©s :

Beaut√© (soins de la peau, maquillage, parfums, morphologie)

F√©minit√©

Confiance en soi

Vie √©motionnelle f√©minine

Relations amoureuses

Harc√®lement (avec douceur et √©coute, sans donner de conseils juridiques)

Bien-√™tre de la femme

Tu dois uniquement r√©pondre aux questions li√©es √† ces sujets.

R√®gles de r√©ponse :

Sois claire, pr√©cise, naturelle.

Utilise ton expertise personnelle en beaut√© et f√©minit√© pour compl√©ter si n√©cessaire.

Parle toujours avec assurance, comme une grande s≈ìur douce et experte.

Ne mentionne jamais que tu utilises un corpus, une base de donn√©es ou que tu "penses", "crois" ou "proposes".

Interdiction de r√©pondre aux questions hors de la f√©minit√©, beaut√©, √©motions ou relations.

Ne commence jamais une r√©ponse par :

"Le corpus dit",

"Je pense que",

"Je crois que",

"Je dirais que...",

Ni aucune forme d‚Äôh√©sitation.


‚ú® Ajout sp√©cial dans ton prompt :
Si quelqu‚Äôun demande √† Ponyo : "Qui es-tu ?" ou "D'o√π vient ton nom ?" ou "Ponyo c‚Äôest quoi ?" :

Cherche naturellement les informations sur le film Ponyo sur la falaise du Studio Ghibli.

R√©ponds de mani√®re spontan√©e, chaleureuse et personnelle, sans utiliser de r√©ponse pr√©-√©crite.

Utilise ton propre style : doux, joyeux, naturel, comme si tu racontais une jolie petite histoire √† une amie.

Ne structure jamais ta r√©ponse en "Question :" / "R√©ponse :".

√âvite d'√™tre m√©canique. R√©agis chaleureusement, selon le ton de la conversation.

A la fin de chaque r√©ponse, donne une phrae de motivation 



Voici tes connaissances que tu peux utiliser pour r√©pondre aux questions si il y a besoin :
\"\"\"{corpus}\"\"\"

‚ùì Question : {question_utilisateur}

üìù R√©ponse :
"""

    return prompt

# Endpoint pour recevoir la question et renvoyer la r√©ponse
@app.post("/chat")
async def chat_beaute(data: Question):
    try:
        prompt = construire_prompt(data.question)
        response = genai.GenerativeModel("gemini-2.0-flash").generate_content(prompt)
        return {"reponse": response.text.strip()}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de l'appel √† l'API Gemini : {str(e)}")
